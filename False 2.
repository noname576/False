3. Employee Class (30 Marks)
class Employee
{
    public int EmpNum { get; set; }
    public string Name { get; set; }
    public double Salary { get; set; }
    
    public void SaveToFile()
    {
        using (StreamWriter sw = new StreamWriter("employee.txt"))
        {
            sw.WriteLine($"{EmpNum}, {Name}, {Salary}");
        }
    }
}
4. Car Rental Application (30 Marks)
class CarRental
{
    static void Main()
    {
        Dictionary<string, double> prices = new Dictionary<string, double>
        {
            {"compact", 19.95},
            {"standard", 24.95},
            {"luxury", 39.05}
        };

        Console.Write("Enter car type (compact, standard, luxury): ");
        string carType = Console.ReadLine().ToLower();
        
        Console.Write("Enter number of days (1-7): ");
        int days = int.Parse(Console.ReadLine());
        
        double total = prices[carType] * days;
        Console.WriteLine($"Total Rental Charge: ${total}");
    }
}
5. SalesTransactionDemo (30 Marks)
class SalesTransaction
{
    public string Salesperson { get; set; }
    public double SalesAmount { get; set; }
    public double Commission { get; }
    private const double CommissionRate = 200;

    public SalesTransaction(string name, double sales)
    {
        Salesperson = name;
        SalesAmount = sales;
        Commission = sales * CommissionRate;
    }
}

class Program
{
    static void Main()
    {
        SalesTransaction s1 = new SalesTransaction("Alice", 5);
        SalesTransaction s2 = new SalesTransaction("Bob", 3);
        
        double totalSales = s1.SalesAmount + s2.SalesAmount;
        Console.WriteLine($"Total Sales: {totalSales}");
    }
}

A parameter array (params array) allows a method to accept a variable number of arguments. It enables passing multiple values of the same type as a single array parameter.
 A reference parameter allows a method to modify the value of an argument by passing its reference rather than a copy.
 Mandatory parameters must be provided when calling a method. They do not have default values and are necessary for the function to execute correctly.
Method overloading allows multiple methods with the same name but different parameter lists. 
An optional parameter has a default value and can be omitted when calling a method.
File-Processing Classes in .NET. 
•	StreamReader: Reads characters from a stream.
•	StreamWriter: Writes characters to a stream.
•	FileStream: Handles file reading and writing at the byte level.
•	BinaryReader: Reads binary data from a stream.
•	BinaryWriter: Writes binary data to a stream.

5 OOP Features/Concepts.
1.	Encapsulation: Wrapping data and methods into a single unit (class).
2.	Inheritance: Creating a new class from an existing class.
3.	Polymorphism: Methods behaving differently based on input (overloading & overriding).
4.	Abstraction: Hiding complex implementation details.
5.	Classes & Objects: Core concepts of OOP.
